{% extends "bases/layout.nunj" %}

{% block styles %}
  {{ super() }}

  <link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.3/css/select2.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/ol3/3.17.1/ol.css" rel="stylesheet">
{% endblock %}


{% block pagecontent %}
  <div class="page-wrapper">
    <div class="search-bar-container">
      <input type="hidden" id="_csrf" name="_csrf" value="{{ csrfToken }}">
      <select id="pokemonPicker" class="pokemon-picker">
        <option></option>
        {% for pokemon in pokemons %}
          <option data-thumbnail="{{ pokemon.image }}"
                  value="{{ pokemon.id }}">{{ pokemon.name }}</option>
        {% endfor %}
      </select>
      <a id="btnRefresh"><i class="fa fa-refresh"></i></a>
    </div>

    <div id="map" class="map"></div>
  </div>
{% endblock %}


{% block footer %}
  {#intentionaly keep blank to clear the footer#}
{% endblock %}


{% block scripts %}
  {{ super() }}

  <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.3/js/select2.full.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/ol3/3.17.1/ol.js"></script>

  <script>

    $(document).ready(function () {
      var pokemonPicker = $('#pokemonPicker'),
        refreshIcon = $('.fa.fa-refresh'),
        animateClass = "icon-refresh-animate";

      function startRefreshButtonAnimation() {
        refreshIcon.addClass(animateClass);
      }

      function stopRefreshButtonAnimation() {
        setTimeout(function () {
          refreshIcon.removeClass(animateClass);
        }, 1000);
      }

      $("#btnRefresh").on("click", function (e) {
        search();
      });

      function formatState(state) {
        if (!state.id) {
          return state.text;
        }
        var $state = $(
          '<span><img src="' + state.element.dataset["thumbnail"] + '" class="pokemon-thumbnail" /> ' + state.text + '</span>'
        );
        return $state;
      }

      pokemonPicker.select2({
        templateResult: formatState,
        placeholder: 'Select the Pokémon you wish to catch...'
      });

      // init the map
      var osmSource = new ol.source.OSM({
        wrapDateLine: false,
        wrapX: false,
        noWrap: true
      });

      var tileGrid = new ol.tilegrid.createXYZ({
        maxZoom: MAP_MAX_LEVEL
      });

      var vectorSource = new ol.source.Vector({});
      var vectorLayer = new ol.layer.Vector({
        source: vectorSource
      });

      var view = new ol.View({
        center: [-7913573.311506975, 5211652.154782659],
        zoom: 16,
        minZoom: 9,
        maxZoom: MAP_MAX_LEVEL
      });

      var interactions = ol.interaction.defaults({altShiftDragRotate: false, pinchRotate: false});

      var map = new ol.Map({
        interactions: interactions,
        layers: [
          new ol.layer.Tile({
            source: osmSource
          }),
          new ol.layer.Tile({
            source: new ol.source.TileDebug({
              projection: 'EPSG:3857',
              tileGrid: tileGrid
            }),
            visible: false
          }),
          vectorLayer
        ],
        target: 'map',
        controls: ol.control.defaults({
          attributionOptions: /** @type {olx.control.AttributionOptions} */ ({
            collapsible: true
          })
        }),
        view: view
      });

      var geolocation = new ol.Geolocation({
        tracking: true,
        projection: view.getProjection()
      });

      geolocation.on('change:position', function () {
        var coordinate = geolocation.getPosition();
        view.setCenter(coordinate);
      });

      pokemonPicker.change(function () {
        search();
      });


      function search() {
        startRefreshButtonAnimation();
        vectorSource.clear();
        var extent = map.getView().calculateExtent(map.getSize());
        var pokemonId = pokemonPicker.val();

        if (!pokemonId) {
          toastr.warning('Please select a Pokémon!', 'Arhhh...', {"positionClass": "toast-bottom-right"});
          stopRefreshButtonAnimation();
          return;
        }

        var bottomLeftTileInfo = tileGrid.getTileCoordForCoordAndResolution([extent[0], extent[1]], MAP_RESOLUTION);
        var topRightTileInfo = tileGrid.getTileCoordForCoordAndResolution([extent[2], extent[3]], MAP_RESOLUTION);

        $.postCSRF('/search', {
          pokemonId: pokemonId,
          bottomLeftX: bottomLeftTileInfo[1],
          bottomLeftY: bottomLeftTileInfo[2],
          topRightX: topRightTileInfo[1],
          topRightY: topRightTileInfo[2]
        }).done(function (res) {
          for (var i in res.data) {
            var record = res.data[i];
            var tileCoordExtent = tileGrid.getTileCoordExtent([MAP_MAX_LEVEL, record.x, record.y]);
            var centerX = tileCoordExtent[0] + (tileCoordExtent[2] - tileCoordExtent[0]) / 2.0;
            var centerY = tileCoordExtent[1] + (tileCoordExtent[3] - tileCoordExtent[1]) / 2.0;

            var iconFeature = new ol.Feature({
              geometry: new ol.geom.Point([centerX, centerY]),
              totalCaught: record.totalCaught,
              percentage: record.percentage,
              name: record.name,
              image: record.image
            });


            var selectedPokemon = pokemonPicker.find('option:selected');


            var iconStyle = new ol.style.Style({
              image: new ol.style.Icon(/** @type {olx.style.IconOptions} */ ({
                anchor: [0.5, 0.5],
                anchorXUnits: 'fraction',
                anchorYUnits: 'fraction',
                src: selectedPokemon.data('thumbnail'),
                scale: 0.25
              }))
            });

            iconFeature.setStyle(iconStyle);

            vectorSource.addFeature(iconFeature);
          }
        }).fail(function (err) {
          toastr.error(err.statusText, 'Oops', {"positionClass": "toast-bottom-right"});
        }).always(function () {
          stopRefreshButtonAnimation();
        });
      }
    });


  </script>
{% endblock scripts %}
